// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(LawHouseDbContext))]
    partial class LawHouseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityModels.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<string>("AdressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonInfoID")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.HasKey("AddressID");

                    b.HasIndex("PersonInfoID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EntityModels.Case", b =>
                {
                    b.Property<int>("CaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseID"));

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LawyerID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseID");

                    b.HasIndex("ClientID");

                    b.HasIndex("LawyerID");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("EntityModels.CaseService", b =>
                {
                    b.Property<int>("CaseID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<float>("HoursWorkedOn")
                        .HasColumnType("real");

                    b.Property<float>("KilometersDriven")
                        .HasColumnType("real");

                    b.HasKey("CaseID", "ServiceID");

                    b.HasIndex("ServiceID");

                    b.ToTable("CaseServices");
                });

            modelBuilder.Entity("EntityModels.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonInfoID")
                        .HasColumnType("int");

                    b.HasKey("ClientID");

                    b.HasIndex("PersonInfoID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("EntityModels.ClientFormular", b =>
                {
                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<int>("FormularID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BuyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientID", "FormularID");

                    b.HasIndex("FormularID");

                    b.ToTable("ClientFormulars");
                });

            modelBuilder.Entity("EntityModels.Email", b =>
                {
                    b.Property<int>("EmailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailID"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonInfoID")
                        .HasColumnType("int");

                    b.HasKey("EmailID");

                    b.HasIndex("PersonInfoID");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("EntityModels.Formular", b =>
                {
                    b.Property<int>("FormularID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormularID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("FormularID");

                    b.ToTable("Formulars");
                });

            modelBuilder.Entity("EntityModels.Lawyer", b =>
                {
                    b.Property<int>("LawyerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LawyerID"));

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonInfoID")
                        .HasColumnType("int");

                    b.HasKey("LawyerID");

                    b.HasIndex("PersonInfoID");

                    b.ToTable("Lawyers");
                });

            modelBuilder.Entity("EntityModels.LawyerSpeciality", b =>
                {
                    b.Property<int>("LawyerID")
                        .HasColumnType("int");

                    b.Property<int>("SpecialityID")
                        .HasColumnType("int");

                    b.HasKey("LawyerID", "SpecialityID");

                    b.HasIndex("SpecialityID");

                    b.ToTable("LawyerSpeciality");
                });

            modelBuilder.Entity("EntityModels.PersonInfo", b =>
                {
                    b.Property<int>("PersonInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonInfoID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonInfoID");

                    b.ToTable("PersonInfos");
                });

            modelBuilder.Entity("EntityModels.Phone", b =>
                {
                    b.Property<int>("PhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneID"));

                    b.Property<int>("PersonInfoID")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("PhoneID");

                    b.HasIndex("PersonInfoID");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("EntityModels.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("PriceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("EntityModels.Speciality", b =>
                {
                    b.Property<int>("SpecialityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialityID"));

                    b.Property<string>("SpecialityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialityID");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("EntityModels.Address", b =>
                {
                    b.HasOne("EntityModels.PersonInfo", "PersonInfo")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonInfo");
                });

            modelBuilder.Entity("EntityModels.Case", b =>
                {
                    b.HasOne("EntityModels.Client", "Client")
                        .WithMany("Cases")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityModels.Lawyer", "Lawyer")
                        .WithMany("Cases")
                        .HasForeignKey("LawyerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("EntityModels.CaseService", b =>
                {
                    b.HasOne("EntityModels.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModels.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("EntityModels.Client", b =>
                {
                    b.HasOne("EntityModels.PersonInfo", "PersonInfo")
                        .WithMany("Clients")
                        .HasForeignKey("PersonInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonInfo");
                });

            modelBuilder.Entity("EntityModels.ClientFormular", b =>
                {
                    b.HasOne("EntityModels.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModels.Formular", "Formular")
                        .WithMany()
                        .HasForeignKey("FormularID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Formular");
                });

            modelBuilder.Entity("EntityModels.Email", b =>
                {
                    b.HasOne("EntityModels.PersonInfo", "PersonInfo")
                        .WithMany("Emails")
                        .HasForeignKey("PersonInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonInfo");
                });

            modelBuilder.Entity("EntityModels.Lawyer", b =>
                {
                    b.HasOne("EntityModels.PersonInfo", "PersonInfo")
                        .WithMany("Lawyers")
                        .HasForeignKey("PersonInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonInfo");
                });

            modelBuilder.Entity("EntityModels.LawyerSpeciality", b =>
                {
                    b.HasOne("EntityModels.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModels.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lawyer");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("EntityModels.Phone", b =>
                {
                    b.HasOne("EntityModels.PersonInfo", "PersonInfo")
                        .WithMany("Phones")
                        .HasForeignKey("PersonInfoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonInfo");
                });

            modelBuilder.Entity("EntityModels.Client", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("EntityModels.Lawyer", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("EntityModels.PersonInfo", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Clients");

                    b.Navigation("Emails");

                    b.Navigation("Lawyers");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
